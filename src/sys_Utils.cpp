////////////////////////////////////////////////////////////////////////////////
//
// PermutationGenerator (Generic)
//
// Desc: sys_Utils.cpp
// Utility.
//
// 04/06/2025 (BGM)
// File inception.
//
////////////////////////////////////////////////////////////////////////////////

#include "sys_Utils.h"

////////////////////////////////////////////////////////////////////////////////
// Macros:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Types:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Prototypes:
////////////////////////////////////////////////////////////////////////////////

void PrintArray(int* arr, int size);
void PrintCombination(int* combination, int size);
void CopyArray(int* source, int* dest, int size);
void Swap(int* a, int* b);
bool ArraysEqual(int* arr1, int* arr2, int size);

////////////////////////////////////////////////////////////////////////////////
// Globals:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Procedures:
////////////////////////////////////////////////////////////////////////////////

void PrintArray(int* arr, int size) {
  for (int i = 0; i < size; i++) {
    std::cout << arr[i];
    if (i < size - 1) std::cout << " ";
  }
  std::cout << std::endl;
}

void PrintCombination(int* combination, int size) {
  for (int i = 0; i < size; i++) {
    std::cout << combination[i];
  }
  std::cout << std::endl;
}

void CopyArray(int* source, int* dest, int size) {
  for (int i = 0; i < size; i++) {
    dest[i] = source[i];
  }
}

void Swap(int* a, int* b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}

bool ArraysEqual(int* arr1, int* arr2, int size) {
  for (int i = 0; i < size; i++) {
    if (arr1[i] != arr2[i]) {
      return false;
    }
  }
  return true;
}
